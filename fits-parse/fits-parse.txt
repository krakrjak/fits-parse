-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package fits-parse
@version 0.0.1


-- | Definitions for the data types needed to parse an HDU in a FITS block.
module HeaderDataUnit
type Bytes = Int
type Count = Int
hduRecordLength :: Bytes
hduMaxRecords :: Count
hduBlockSize :: Bytes
data StringType
NullString :: StringType
EmptyString :: StringType
DataString :: StringType
UndefinedString :: StringType
data StringValue
StringValue :: StringType -> Maybe Text -> StringValue
[stringType] :: StringValue -> StringType
[stringValue] :: StringValue -> Maybe Text
data NumberType

-- | HDU ASCII encoded integer number
IntegerType :: NumberType

-- | HDU ASCII encoded real number
RealType :: NumberType

-- | HDU ASCII encoded complex number
ComplexType :: NumberType
data NumberModifier

-- | HDU positive number value
Positive :: NumberModifier

-- | HDU negative number value
Negative :: NumberModifier

-- | HDU numeric value is zero, could be positive or negative
Zero :: NumberModifier

-- | <a>NumberValue</a> contains an encoded numeric record from a data
--   field. This data type still needs to be converted into more useful
--   Haskell data types.
data NumberValue
NumberValue :: NumberType -> NumberModifier -> Text -> Maybe NumberModifier -> Maybe Text -> Maybe NumberModifier -> Maybe Int -> NumberValue
[numberType] :: NumberValue -> NumberType
[realModifier] :: NumberValue -> NumberModifier
[realPart] :: NumberValue -> Text
[imaginaryModifier] :: NumberValue -> Maybe NumberModifier
[imaginaryPart] :: NumberValue -> Maybe Text
[exponentModifier] :: NumberValue -> Maybe NumberModifier
[exponent] :: NumberValue -> Maybe Int
data SimpleFormat

-- | Value of SIMPLE is T in the header
Conformant :: SimpleFormat

-- | Value of SIMPLE is F in the header
NonConformant :: SimpleFormat
data NAxisType

-- | No data follows the header
ZeroAxes :: NAxisType

-- | There is one or more axes in the data following the header
ManyAxes :: NAxisType
data NAxisMetadata
NAxisMetadata :: NAxisType -> Int -> NAxisMetadata

-- | Are there zero or more axes of data?
[naxisType] :: NAxisMetadata -> NAxisType

-- | How many axes are there in the dataset?
[axesCount] :: NAxisMetadata -> Int
data Axis
Axis :: Int -> Int -> Axis

-- | The axis number under consideration
[axisNumber] :: Axis -> Int

-- | The number of elements in this axis
[axisElementCount] :: Axis -> Int
data BitPixFormat

-- | BITPIX = 8; unsigned binary integer of 8 bits
EightBitInt :: BitPixFormat

-- | BITPIX = 16; two's complement binary integer of 16 bits
SixteenBitInt :: BitPixFormat

-- | BITPIX = 32; two's complement binary integer of 32 bits
ThirtyTwoBitInt :: BitPixFormat

-- | BITPIX = 64; two's complement binary integer of 64 bits
SixtyFourBitInt :: BitPixFormat

-- | BITPIX = -32; IEEE single precision floating point of 32 bits
ThirtyTwoBitFloat :: BitPixFormat

-- | BITPIX = -64; IEEE double precision floating point of 64 bits
SixtyFourBitFloat :: BitPixFormat


-- | Parsing rules for an HDU in a FITS file.
module MegaParser
type Parser = Parsec Void ByteString
type ParseErr = ParseError Word8 Void
